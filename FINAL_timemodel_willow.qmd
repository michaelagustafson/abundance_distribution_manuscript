---
title: "FINAL_timemodel_willow"
format: docx
editor: visual
---

```{r}
# Clean your workspace to reset your R environment
rm( list = ls() )
# Check that you are in the right project folder
getwd()
```

## Library

```{r}
library(unmarked)
library(raster)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(AICcmodavg)
```

## Import data

```{r}
allCovs_std <- read.csv("D:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/si_obs_covs_scaled_16nov23.csv")

colnames(allCovs_std)[27] <- "elev"
```

```{r}

timeFrame <- unmarkedFrameMPois(
  # import time removal columns(counts):
  y = allCovs_std[,c(2:6)], 
  siteCovs = data.frame(allCovs_std), 
  # define pifun type: 
  type = "removal" )
# fit models: multinomPois order of formulas: detection, abundance

time.model <- multinomPois( ~ 1 + julian + min_after_sun + wind + observer ~ 1 + tundra + tussock + tallshrub + elev + offset(log(area)), data = timeFrame)


model_summary <- summary(time.model)

state_confint <- as.data.frame(confint(time.model, type = "state"))
det_confint <- as.data.frame(confint(time.model, type = "det"))


state_summary <- as.data.frame(model_summary$state)
det_summary <- as.data.frame(model_summary$det)


# Round the values to two decimal places
state_confint <- round(state_confint[ ,c(1:2)], 2)
det_confint <- round(det_confint[ ,c(1:2)], 2)

state_summary <- round(state_summary[ ,c(1:4)], 2)
det_summary <- round(det_summary[ ,c(1:4)], 2)


#save

write.csv(state_summary, "D:/gyrf_analysis/willow_state_summary.csv")
write.csv(det_summary, "D:/gyrf_analysis/willow_det_summary.csv")
write.csv(state_confint, "D:/gyrf_analysis/willow_state_confint.csv")
write.csv(det_confint, "D:/gyrf_analysis/willow_det_confint.csv")
```

## Prediction Maps

```{r}
# Import already scaled (by 2 std dev) rasters


elev <- raster("D:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/elev_std.tif")

tallshrub <- raster("D:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/tallshrub.tif")

tundra <- raster("D:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/tundra.tif")

tussock <- raster("D:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/percent cover standardized/tussock.tif")


area.raster <- elev 
values(area.raster) <- 800*800/10000 # area of a grid pixel, divided by 10000 to standardize

# pull scaled (by 2 std dev) observation/yearlySite covs from dataframe

jul.raster <- elev # create a raster using one thats already in correct crs/scale
values(jul.raster) <- mean(allCovs_std$julian) # replace data with that of what you want - doing it with the mean scaled value of obs covs

wind.raster <- elev 
values(wind.raster) <- mean(allCovs_std$wind)

minsun.raster <- elev 
values(minsun.raster) <- mean(allCovs_std$min_after_sun)

obs.raster <- elev 
values(obs.raster) <- as.factor("DS") # "DS" is the intercept



pred.surface <- stack(tundra, tussock, tallshrub, elev, area.raster, jul.raster, wind.raster, minsun.raster, obs.raster)

names(pred.surface) <- c("tundra", "tussock", "tallshrub", "elev", "area", "julian", "wind", "min_after_sun", "observer")
```

par(wplot)

```{r}
time.prediction <- predict(time.model, type = "state", newdata = pred.surface) 

color_palette <- colorRampPalette(c("#FFFFFF", "#0072B2"))(100)  # Change the first color as needed
plot(time.prediction, axes = FALSE, col = color_palette)

#look at some stats
cellStats(time.prediction, "sum") # 55 431 total abundance
cellStats(time.prediction, "min") # minimum density of 0.26 males/800m2
cellStats(time.prediction, "max") # maximum density of 5.08 males/800m2
cellStats(time.prediction, "mean") # 2.13 males/800m2

writeRaster(time.prediction, filename = names(time.prediction), bylayer = TRUE, format = "GTiff", overwrite = TRUE)
```

## Partial Prediction Plots: Abundance

```{r}

raw_vals <- read.csv("D:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/raw_hab_vals.csv")
raw_vals$raw_elev <- as.numeric(raw_vals$raw_elev)
raw_vals <- na.omit(raw_vals)

standardise <- function( xmat, stdevs = 2, marg = c( 1, 2) ) { 
  mean.xmat = mean( as.vector( xmat ), na.rm = TRUE )
  sd.xmat = sd( as.vector( xmat ), na.rm = TRUE ) 
  std.xmat = apply( xmat, marg, function( x ){
    ( x - mean.xmat ) / (stdevs * sd.xmat ) } )
  return( std.xmat )
}


# Estimate partial prediction plots for predictors with 95% CIs not overlapping zero:

# Start by creating our datasets to predict over

# how many values do we use:
n <- 100

# Use the observed values to define our range:

# import unscaled predictors
#env <- read.csv("D:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/final_env_join_18Oct23.csv")

elevation.pp <- seq( min( raw_vals[,19]),max(500),
                   length.out = n )

tallshrub.pp <- seq( min( raw_vals[,"tallshrub"]),max( raw_vals[,"tallshrub"]),
                   length.out = n )

tundra.pp <- seq( min( raw_vals[,"tundra"]),max( raw_vals[,"tundra"]),
                   length.out = n )

tussock.pp <- seq( min( raw_vals[,"tussock"]),max( raw_vals[,"tussock"]),
                   length.out = n )

#standardize predictors:

area.x = (pi*400*400)/10000

elevation.std <- standardise(as.matrix(elevation.pp))
tallshrub.std <- standardise(as.matrix(tallshrub.pp))
tundra.std <- standardise(as.matrix(tundra.pp))
tussock.std <- standardise(as.matrix(tussock.pp))


```

### Tundra

```{r}
tundData <- data.frame( tundra = tundra.std, tussock = 0, tallshrub = 0, elev = 0, area = area.x )

#predict partial relationship:
tun.t <- predict( time.model, type = "state", newdata = tundData, 
                          appendData = TRUE )

### plot

tund.t <- cbind( tun.t[,c("Predicted", "lower", "upper") ], tundra.pp ) %>%
  # define x and y values
  ggplot(., aes( x = tundra.pp, y = Predicted ) ) + 
  #choose preset look
  ylim(0, 6) +
  theme_classic( base_size = 32) +
  # turn x axis into percent scale
  scale_x_continuous(labels = scales::percent_format(accuracy=1)) +
  # add labels
  labs( x = "Tundra") +
  labs( y = NULL) +
  # add band of confidence intervals
  #theme(text=element_text(size=75)) +
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "#A8CAE9" ) +
  # add mean line on top
  geom_line( size = 5, color = "#0072B2")
tund.t

ggsave("D:/gyrf_analysis/abundance plots 22Mar24/wipt_tundra.png", width = 7, height = 7, dpi = 300, limitsize = FALSE)

folder_name <- "D:/gyrf_analysis/abundance plots 22Mar24"
file_name <- "wipt_tundra.eps"

postscript(file.path(folder_name, file_name), width = 7, height = 7, horizontal = FALSE, on = "flush")
print(tund.t)
dev.off()
```

### Tussock

```{r}
tussData <- data.frame( tundra = 0, tussock = tussock.std, tallshrub = 0, elev = 0, area = area.x )

#predict partial relationship:
tuss.t <- predict( time.model, type = "state", newdata = tussData, 
                          appendData = TRUE )


### plot

t.tuss <- cbind( tuss.t[,c("Predicted", "lower", "upper") ], tussock.pp ) %>%
  # define x and y values
  ggplot(., aes( x = tussock.pp, y = Predicted ) ) + 
  #choose preset look
  theme_classic( base_size = 32) +
  # add labels
  ylim(0, 6) +
  # turn x axis into percent scale
  scale_x_continuous(labels = scales::percent_format(accuracy=1)) +
  labs( x = "Tussock", y = NULL ) +
  # add band of confidence intervals
  #theme(text=element_text(size=65)) +
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "#A8CAE9" ) +
  # add mean line on top
  geom_line( size = 5, color = "#0072B2" )
#view
t.tuss

ggsave("D:/gyrf_analysis/abundance plots 22Mar24/wipt_tussock.png", width = 7, height = 7, dpi = 300, limitsize = FALSE)
```

### Tallshrub

```{r}
#| echo: false
tallData <- data.frame( tundra = 0, tussock = 0, tallshrub = tallshrub.std, elev = 0, area = area.x )

#predict partial relationship:
tall.t <- predict( time.model, type = "state", newdata = tallData, 
                          appendData = TRUE )


### plot

f
```

### Elevation

```{r}
elevData <- data.frame( tundra = 0, tussock = 0, tallshrub = 0, elev = elevation.std, area = area.x )

#predict partial relationship:
pred.elev.t <- predict(time.model, type = "state", newdata = elevData, 
                          appendData = TRUE )


### plot

elev.t <- cbind( pred.elev.t[,c("Predicted", "lower", "upper") ], elevation.pp ) %>%
  # define x and y values
  ggplot(., aes( x = elevation.pp, y = Predicted ) ) + 
  #choose preset look
  theme_classic( base_size = 32) +
  # add labels
  ylim(0, 6) +
  labs( x = "Elevation (m)", y = NULL ) +
  #theme(text=element_text(size=65)) +
    # add band of confidence intervals
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "#A8CAE9" ) +
  # add mean line on top
  geom_line( size = 5, color = "#0072B2" )


#view
elev.t

ggsave("D:/gyrf_analysis/abundance plots 22Mar24/wipt_elev.png", width = 7, height = 7, dpi = 300, limitsize = FALSE)
```

## Partial Prediction Plots: Detection

```{r det plot}

raw_det <- read.csv("D:/gyrf_analysis/MSgyrfalcon/MSgyrfalcon/data/all_env_FINAL.csv")
raw_det2 <- raw_det[,c(2:3, 5:6, 9)]

# Start by creating our datasets to predict over

# how many values do we use:
n <- 100


# Use the observed values to define our range:
julian.pp <- seq( min( raw_det2[,"julian"]),max(raw_det2[,"julian"]),
                   length.out = n )

wind.pp <- seq( min( raw_det2[,"wind"]),max( raw_det2[,"wind"]),
                   length.out = n )

wind.km <- wind.pp*1.60934

minsun.pp <- seq( min( raw_det2[,"min_after_sun"]),max( raw_det2[,"min_after_sun"]),
                   length.out = n )


#standardize predictors:
jul.std <- standardise(as.matrix( julian.pp ))
wind.std.km <- standardise(as.matrix(wind.km ))
minsun.std <- standardise(as.matrix( minsun.pp ))
area.x = pi*400*400/10000


```

### Observer

```{r observer}

# Observer effect
#combine standardized predictors into a new dataframe to predict partial relationship
# for abundance submodel:
detDataobs <- data.frame( observer = factor( c("DS", "KW","MG"), levels = c("DS", "KW","MG") ),
                       julian = 0, 
                       wind = 0, 
                       min_after_sun = 0)


#predict partial relationship:
pred.obs <- predict( time.model, type = "det", newdata = detDataobs, 
                          appendData = TRUE )



obsvp.det <- pred.obs %>%
  # define x and y values
  ggplot(., aes( x = observer, y = Predicted, color = observer ) ) + 
  #choose preset look
  theme_classic( base_size = 32 ) +
  #remove legend
  theme( legend.position = "none" ) +
  # add labels
  labs( x = "Observer", y = NULL ) +
  scale_x_discrete(labels = c("1", "2", "3")) +
  #theme(text=element_text(size=75)) +
  #add mean detection for each observer
  geom_point( size = 5 ) +
  # add confidence intervals
  geom_errorbar( aes(ymin = lower, ymax = upper ), 
               size = 2, width = 0.1 ) +
  scale_color_manual(values=c('#0072B2','#0072B2','#0072B2')) +
  ylim(0,0.25)
#view
obsvp.det


ggsave("D:/gyrf_analysis/detection plots 22Mar24/wipt_observer.png", width = 7, height = 7, dpi = 300)
```

### Julian

```{r juls}

detDatajul <- data.frame( observer = factor("DS", levels = c("DS", "KW","MG") ),
                       julian = jul.std, 
                       wind = 0, 
                       min_after_sun = 0)


#predict partial relationship:
pred.jul <- predict( time.model, type = "det", newdata = detDatajul, 
                          appendData = TRUE )

julp.det <- cbind( pred.jul[,c("Predicted", "lower", "upper") ], julian.pp ) %>%
  # define x and y values
  ggplot(., aes( x = julian.pp, y = Predicted ) ) + 
  #choose preset look
  theme_classic( base_size = 32 ) +
  # add labels
  labs( x = "Day of year", y = NULL ) +
  #theme(text=element_text(size=75)) +
  # add band of confidence intervals
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "#A8CAE9" ) +
  # add mean line on top
  geom_line( size = 5, color = "#0072B2" ) +
  ylim(0,.9)
#view
julp.det



ggsave("D:/gyrf_analysis/detection plots 22Mar24/wipt_julian.png", width = 7, height = 7, dpi = 300)
```

### Wind speed

```{r wind}
detDatawind <- data.frame( observer = factor("DS", levels = c("DS", "KW","MG") ),
                       julian = 0, 
                       wind = wind.std.km, 
                       min_after_sun = 0)


#predict partial relationship:
pred.wind <- predict( time.model, type = "det", newdata = detDatawind, 
                          appendData = TRUE )

windp.det <- cbind( pred.wind[,c("Predicted", "lower", "upper") ], wind.km ) %>%
  # define x and y values
  ggplot(., aes( x = wind.km, y = Predicted ) ) + 
  #choose preset look
  theme_classic( base_size = 32 ) +
  # add labels
  labs( x = "Wind speed (km/h)", y = NULL ) +
  #theme(text=element_text(size=75)) +
  # add band of confidence intervals
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "#A8CAE9" ) +
  # add mean line on top
  geom_line( size = 5, color = "#0072B2" ) +
  ylim(0,.6)
#view
windp.det

ggsave("D:/gyrf_analysis/detection plots 22Mar24/wipt_wind.png", width = 7, height = 7, dpi = 300)

```

### Minutes after sunrise

```{r sun}
detDatasun <- data.frame( observer = factor("DS", levels = c("DS", "KW","MG") ),
                       julian = 0, 
                       wind = 0, 
                       min_after_sun = minsun.std)


#predict partial relationship:
pred.sun <- predict(time.model, type = "det", newdata = detDatasun, 
                          appendData = TRUE )

sunp.det <- cbind( pred.sun[,c("Predicted", "lower", "upper") ], minsun.pp ) %>%
  # define x and y values
  ggplot(., aes( x = minsun.pp, y = Predicted ) ) + 
  #choose preset look
  theme_classic( base_size = 32 ) +
  # add labels
  labs( x = "Minutes after sunrise", y = NULL ) +
  #theme(text=element_text(size=75)) +
  # add band of confidence intervals
  geom_smooth( aes(ymin = lower, ymax = upper ), 
               stat = "identity",
               size = 5, alpha = 0.5, fill = "#A8CAE9" ) +
  # add mean line on top
  geom_line( size = 5, color = "#0072B2" ) +
  ylim(0,.9)
#view
sunp.det


ggsave("D:/gyrf_analysis/detection plots 22Mar24/wipt_minsun.png", width = 7, height = 7, dpi = 300)

```

## Model Fit

```{r}
set.seed(1234)


#fit stats for NB model
fitstats.tm <- function(time.model) {
  observed <- getY(time.model@data)
  expected <- fitted(time.model)
  resids <- residuals(time.model)
  n.obs <- apply(observed,1,sum,na.rm=TRUE)
  n.pred <- apply(expected,1,sum,na.rm=TRUE)
  sse <- sum(resids^2, na.rm=TRUE)
  chisq <- sum((observed - expected)^2 / expected, na.rm=TRUE)
  freeTuke <- sum((sqrt(observed) - sqrt(expected))^2, na.rm=TRUE)
  freeTuke.n <- sum((sqrt(n.obs)-sqrt(n.pred))^2, na.rm=TRUE)
  sse.n <- sum( (n.obs-n.pred)^2, na.rm=TRUE)
  chisq.n <- sum((n.obs-n.pred)^2/expected, na.rm=TRUE)
  
  out <- c(SSE=sse, Chisq=chisq, freemanTukey=freeTuke, SSE.n=sse.n, Chisq.n=chisq.n, freemanTukey.n=freeTuke.n)
  return(out)
}

(gof.time.model <- parboot(time.model, fitstats.tm, nsim = 1000, report = 1))


print(gof.time.model)


saveRDS(gof.time.model, ("C:/Users/Ryan/OneDrive/Documents/MSgyrfalcon/wipt_gof_timemodel_27Nov23.rds"))

# compute c-hat
chat.tm <- gof.time.model@t0[2]/mean(gof.time.model@t.star[,2])
chat.tm # 1.01


```

## Model Fit with nmixgof

```{r}

nmix.gof.time <- AICcmodavg::Nmix.gof.test(time.model, nsim = 1000, parallel = TRUE)
```
